#!/usr/bin/env bash
# This is a pre-commit hook that validates code.
#
# Install this by running the script with an argument of "install",
# which installs a symlink to .git/hooks/precommit:
# $ ln -s ../../hooks/pre-commit .git/hooks/pre-commit
#
# Run "./pre-commit all" to have this run a more complete set of tests
# over the current tree.

root="$(git rev-parse --show-toplevel 2>/dev/null)"

# Some sanity checking.
hash cargo || exit 1
[[ -n "$root" ]] || exit 1

# Installation.
if [[ "$1" == "install" ]]; then
    hook="$root"/.git/hooks/pre-commit
    if [[ ! -e "$hook" ]]; then
        ln -s ../../pre-commit "$hook"
        echo "Installed git pre-commit hook at $hook"
    else
        echo "Hook already installed"
    fi
    exit
fi

# Check formatting.
if [[ "$1" != "all" ]]; then
    dotgit="$(git rev-parse --git-dir)"
    msg="pre-commit stash @$(git rev-parse --short @) $$-$RANDOM"
    trap 'git stash list -1 --format="format:%s" | grep -q "'"$msg"'" && git stash pop -q && mv "'"$root"'"/MERGE_* "'"$dotgit"'"' EXIT
    mv "$dotgit"/MERGE_* "$root"
    git stash push -kuq -m "$msg"
fi
if ! errors=($(cargo fmt -- --check --config imports_granularity=crate -l)); then
    echo "Formatting errors found."
    echo "Run \`cargo fmt\` to fix the following files:"
    for err in "${errors[@]}"; do
        echo "  $err"
    done
    exit 1
fi
versions=(stable)
if [[ "$1" == "all" ]]; then
    versions+=(1.81.0)
fi
check() {
    if ! "$@"; then
        echo "Failed [$?]: ${@@Q}"
        exit 1
    fi
}

for v in "${versions[@]}"; do
    check cargo "+$v" clippy --tests
    check cargo "+$v" test
    if [[ -n "$NSS_DIR" ]]; then
        check cargo "+$v" clippy --tests --no-default-features --features nss,http
        check cargo "+$v" test --no-default-features --features nss,http
    fi
done
