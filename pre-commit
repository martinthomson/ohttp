#!/usr/bin/env bash
# This is a pre-commit hook that validates code formatting.
#
# Install this by running the script with an argument of "install",
# which installs a symlink to .git/hooks/precommit:
# $ ln -s ../../hooks/pre-commit .git/hooks/pre-commit

root="$(git rev-parse --show-toplevel 2>/dev/null)"
RUST_FMT_CFG="imports_granularity=Crate,group_imports=StdExternalCrate"

# Some sanity checking.
set -e
hash cargo
[[ -n "$root" ]]

# Installation.
if [[ "$1" == "install" ]]; then
    hook="$root"/.git/hooks/pre-commit
    if [[ ! -e "$hook" ]]; then
        ln -s ../../pre-commit "$hook"
        echo "Installed git pre-commit hook at $hook"
    else
        echo "Hook already installed"
    fi
    exit
fi

# Stash unstaged changes
if [[ "$1" != "all" ]]; then
    stashdir="$(mktemp -d "$root"/.pre-commit.stashXXXXXX)"
    msg="pre-commit stash @$(git rev-parse --short @) ${stashdir##*.stash}"
    gitdir="$(git rev-parse --git-dir 2>/dev/null)"

    stash() {
        # Move MERGE_[HEAD|MODE|MSG] files to the root directory, and let `git stash push` save them.
        find "$gitdir" -maxdepth 1 -name 'MERGE_*' -exec mv \{\} "$stashdir" \;
        git stash push -k -u -q -m "$msg"
    }

    unstash() {
        git stash list -1 --format="format:%s" | grep -q "$msg" && git stash pop -q
        # Moves MERGE files restored by `git stash pop` back into .git/ directory.
        if [[ -d "$stashdir" ]]; then
            find "$stashdir" -exec mv -n \{\} "$gitdir" \;
            rmdir "$stashdir"
        fi
    }

    trap unstash EXIT
    stash
fi

# Check formatting
if ! errors=($(cargo fmt -- --check --config "$RUST_FMT_CFG" -l)); then
    echo "Formatting errors found in:"
    for err in "${errors[@]}"; do
        echo "  $err"
    done
    echo "To fix, run \`cargo fmt -- --config $RUST_FMT_CFG\`"
    exit 1
fi

check() {
    msg="$1"
    shift
    if ! "$@"; then
        echo "${msg}: Failed command:"
        echo "    ${@@Q}"
        exit 1
    fi
}
versions=(stable)
if [[ "$1" == "all" ]]; then
    versions+=(1.82.0)
fi
for v in "${versions[@]}"; do
    check "clippy" cargo "+$v" clippy --tests
    check "test" cargo "+$v" test
    if [[ -n "$NSS_DIR" ]]; then
        check "clippy(NSS)" cargo "+$v" clippy --tests --no-default-features --features nss,http
        check "test(NSS)" cargo "+$v" test --no-default-features --features nss,http
    fi
done
